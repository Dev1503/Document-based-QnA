# -*- coding: utf-8 -*-
"""DocQnA_v1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1chU-5PD3vbhlHvsr9n2uLySJJ5547gks

## Installing necessary libraries
"""

# !pip install -q streamlit
!pip install -q tabula-py
!pip install -q spacy
!pip install -q spacy-llm
!pip install -q groq

!git clone https://github.com/Dev1503/Document-based-QnA

"""## Creating files for LLM-NER"""

# Commented out IPython magic to ensure Python compatibility.
%%writefile /content/llm_ner.cfg
[nlp]
lang = "en"
pipeline = ["llm"]

[components]

[components.llm]
factory = "llm"

[components.llm.task]
@llm_tasks = "spacy.NER.v2"
labels = Political_Party, Purchaser

[components.llm.task.examples]
@misc = "spacy.FewShotReader.v1"
path = "ner_examples.yml"

[components.llm.model]
@llm_models = "spacy.Command.v1"
config = {"temperature": 0.0}

Commented out IPython magic to ensure Python compatibility.
%%writefile /content/ner_examples.yml
- text: "What is the total bond amount enchased by TELUGU DESAM PARTY on 12th April 2019?"
  entities:
    Political_Party:
      - TELUGU DESAM PARTY
- text: "What is the total amount received by AAM AADMI PARTY from DR. MANDEEP SHARMA in the year 2022?"
  entities:
    Political_Party:
      - AAM AADMI PARTY
    Purchaser:
      - DR. MANDEEP SHARMA
- text: "What is the total number of bonds purchased by ACROPOLIS MAINTENANCE SERVICES PRIVATE LIMITED on 12th April 2019?"
  entities:
    Purchaser:
      - ACROPOLIS MAINTENANCE SERVICES PRIVATE LIMITED
- text: "What is the denomination of the amount encashed by BHARATIYA JANATA PARTY on 21st October 2022?"
  entities:
    Political_Party:
      - BHARATIYA JANATA PARTY
- text: "What is the total bond amount encashed by BHARAT RASHTRA SAMITHI in 2023?"
  entities:
    Political_Party:
      - BHARAT RASHTRA SAMITHI
- text: "Did DRAVIDA MUNNETRA KAZHAGAM the highest total encashment in the year 2021?"
  entities:
    Political_Party:
      - DRAVIDA MUNNETRA KAZHAGAM
- text: "Did JANASENA PARTY have lower encashment than PRESIDENT, ALL INDIA CONGRESS COMMITTEE in the month of November in the year 2022."
  entities:
    Political_Party:
      - JANASENA PARTY
      - PRESIDENT, ALL INDIA CONGRESS COMMITTEE
- text: "Did TELUGU DESAM PARTY have the lowest total encashment amount from 2019 to 2023?"
  entities:
    Political_Party:
      - TELUGU DESAM PARTY
- text: "Was ASHISH AGARWAL in the top 20% of purchasers in terms of total amount issued in October 2022?"
  entities:
    Purchaser:
      - ASHISH AGARWAL
- text: "What was the total amount received by AAM AADMI PARTY from DR.MANDEEP SHARMA between 2019 to 2024?"
  entities:
    Political_Party:
      - AAM AADMI PARTY
    Purchaser:
      - DR. MANDEEP SHARMA
- text: "What percentage of the total amount received by SHIVSENA from HERO MOTOCORP LIMITED in October 2022 was encashed?"
  entities:
    Political_Party:
      - SHIVSENA
    Purchaser:
      - HERO MOTOCORP LIMITED
- text: "Find the median amount issued by BENGAL VIPANAPAN PRIVATE LIMITED for each month in the year 2022."
  entities:
    Purchaser:
      - BENGAL VIPANAPAN PRIVATE LIMITED
- text: "What is the average amount issued by DR REDDY'S LABORATORIES LTD per month for the year 2022?"
  entities:
    Purchaser:
      - DR REDDYS LABORATORIES LTD
- text: "Did AAM AADMI PARTY, SHIVSENA and BIJU JANATA DAL receive any amount from the same purchaser in 2021?"
  entities:
    Political_Party:
      - AAM AADMI PARTY
      - SHIVSENA
      - BIJU JANATA DAL
- text: "What percentage of the total encashment of YSR CONGRESS PARTY (YUVAJANA SRAMIKA RYTHU CONGRESS PARTY) did SHIROMANI AKALI DAL encash from 2019 to 2024?"
  entities:
    Political_Party:
      - YSR CONGRESS PARTY (YUVAJANA SRAMIKA RYTHU CONGRESS PARTY)
      - SHIROMANI AKALI DAL
- text: "List the top 3 purchasers that issued higher amount than RASHMI CEMENT LTD, MOHIT MINERALS LIMITED and JINDAL STEEL AND POWER LIMITED in August 2023."
  entities:
    Purchaser:
      - RASHMI CEMENT LTD
      - MOHIT MINERALS LIMITED
      - JINDAL STEEL AND POWER LIMITED
- text: "Give me the average amount issued by CASTLE LIQUORS PRIVATE LIMITED, DS ENGINEERING WORKS LLP, DINESHCHANDRA R AGRAWAL INFRACON PVT LTD and N A R INFRA PRIVATE LIMITED."
  entities:
    Purchaser:
      - CASTLE LIQUORS PRIVATE LIMITED
      - D S ENGINEERING WORKS LLP
      - DINESHCHANDRA R AGRAWAL INFRACON PVT LTD
      - N A R INFRA PRIVATE LIMITED
- text: "What the names of the parties that encashed within 50%-80% total amount issued by WESTERN UP POWER TRANSMISSION COMPANY LIMITED on 2nd January 2024?"
  entities:
    Purchaser:
      - WESTERN UP POWER TRANSMISSION COMPANY LIMITED
- text: "Is the total encashment amount by JHARKHAND MUKTI MORCHA on 1st February 2023 equal to the amount issued by IFB AGRO INDUSTRIES LIMITED the same day?"
  entities:
    Political_Party:
      - JHARKHAND MUKTI MORCHA
    Purchaser:
      - IFB AGRO INDUSTRIES LIMITED

Commented out IPython magic to ensure Python compatibility.
%%writefile app.py
import streamlit as st
import streamlit.components.v1 as components

#######################################################
custom_css = """
<style>
    body {
        font-family: 'Times New Roman', Times, serif;
        background-color: white;
        margin: 0;
        padding: 0;
    }
    header {
    background-color: #202123;
    padding: 10px 20px;
    color: white;
    font-size: 1.5em;
    text-align: center;
    border-radius: 5px;
    margin-bottom: 5px;
    }
    footer {
        background-color: black;
        color: white;
        padding: 10px 20px;
        text-align: center;
        position: fixed;
        width: 100%;
        bottom: 0;
        z-index: 1000;
    }
    sidebar {
        height: 100%;
        width: 0;
        position: fixed;
        z-index: 1000;
        top: 0;
        left: 0;
        background-color: brown;
        overflow-x: hidden;
        transition: 0.5s;
        padding-top: 60px;
    }
    .sidebar a {
        padding: 10px 15px;
        text-decoration: none;
        font-size: 18px;
        color: white;
        display: block;
        transition: 0.3s;
    }
    .sidebar a:hover {
        background-color: #575757;
    }
    .sidebar .closebtn {
        position: absolute;
        top: 0;
        right: 25px;
        font-size: 36px;
        margin-left: 50px;
    }
    .openbtn {
        font-size: 20px;
        cursor: pointer;
        background-color: orange;
        color: white;
        border: none;
        padding: 10px 15px;
        position: fixed;
        top: 10px;
        left: 10px;
        z-index: 1001;
    }
    .openbtn:hover {
        background-color: #444;
    }
    .content {
        margin-top: 5px;
        padding: 20px;
        transition: margin-left .5s;
        padding: 20px;
    }
    .typewriter{
        overflow: hidden; /* Ensures the text is hidden initially */
        border-right: .15em transparent white; /* Creates the cursor effect */
        white-space: wrap; /* Prevents text from wrapping */
        margin: 0 auto; /* Center the text */
        max-width=80%; /* Set a maximum width for the text */
        animation: typing 3.5s steps(30, end), blink-caret .75s step-end infinite;
    }

    /* The typing effect */
    @keyframes typing {
        from { width: 0; }
        to { width: 100%; }
    }

    /* The cursor blink effect */
    @keyframes blink-caret {
        from, to { border-color: transparent; }
        50% { border-color: white; }
    }
</style>
"""

custom_html = """
<div class="header">
  <div class="typewriter">
    <h1>Your Personalised Smart Document QnA Tool!</h1>
  </div>
</div>



<button class="openbtn" onclick="openNav()">&#9776; Open Sidebar</button>
"""
custom_js = """
<script>
function openNav() {
    document.getElementById("mySidebar").style.width = "250px";
    document.getElementById("main").style.marginLeft = "250px";
}

function closeNav() {
    document.getElementById("mySidebar").style.width = "0";
    document.getElementById("main").style.marginLeft= "0";
}
</script>
"""
###############################################################

st.markdown(custom_css, unsafe_allow_html=True)
st.markdown(custom_html, unsafe_allow_html=True)
components.html(custom_js)

st.markdown("<div id='main' class='content'>", unsafe_allow_html=True)
###############################################################

st.markdown("</div>", unsafe_allow_html=True)

st.sidebar.title("Personalize your Model")

st.sidebar.header("Models")
model_checkpoint= st.sidebar.selectbox("Choose a model:", ["mixtral-8x7b-32768", "gemma-7b-it", "llama3-70b-8192", "llama3-8b-8192"])
print(f"model: {model_checkpoint}")

st.sidebar.header("Hyper-Parameters")

temperature = st.sidebar.slider("Temperature", 0.0, 2.0, 0.2)
print(f"temperature: {temperature}")

max_tokens = st.sidebar.slider("Maximum Length", 1, 500, 100)
print(f"max_tokens: {max_tokens}")

stop_sequence = st.sidebar.text_input(label="Stop Token", label_visibility="visible")
print(f"stop_sequence: {stop_sequence}")

top_p = st.sidebar.slider("Top-p Value", 0, 1, 1)
print(f"top_p: {top_p}")

stream= st.sidebar.toggle(value=False, label="Stream", label_visibility="visible")
print(f"stream: {stream}")
###############################################################

import os
os.environ['CO_API_KEY'] = "X0jjKjJCJgtKd41OSzCXGhvB3q5Ns5bOkJaIzFXg"
GROQ_API_KEY = "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"

import os
from groq import Groq

client = Groq(api_key = GROQ_API_KEY)

from spacy_llm.util import assemble
nlp = assemble("llm_ner.cfg")

import pandas as pd
import tabula

###########################################


def clean_column_names(df):
    df.columns = df.columns.str.replace('\r', ' ', regex=False)
    return df

def filter_dataframes (party_df_final, company_df_final, q_dict):
    political_parties = q_dict.get('Political_Party', [])
    purchasers = q_dict.get('Purchaser', [])
    # print(political_parties)
    # print(purchasers)

    filtered_pol_df = party_df_final[party_df_final['Name of the Political Party'].isin(political_parties)]
    filtered_pol_df = filtered_pol_df.reset_index(drop=True)

    filtered_comp_df = company_df_final[company_df_final['Name of the Purchaser'].isin(purchasers)]
    filtered_comp_df = filtered_comp_df.reset_index(drop=True)

    return filtered_pol_df, filtered_comp_df

def merge_on_multiple_columns(df1, df2):
    if df1.empty or df2.empty:
        return df1, df2
    else:
        merged_df = pd.merge(df1, df2, on=['Prefix', 'Bond Number', 'Denominations'], how='inner')
        return merged_df

def dataframe_to_sentence_string(df):
    sentences = []
    for index, row in df.iterrows():
        sentence = ", ".join([f"{col}: {row[col]}" for col in df.columns])
        sentences.append(f"Row {index + 1}: {sentence}.")
    return "\n".join(sentences)


def inp_prmpt (context_df, context_name, context_col_list, q_text):
    sys_msg = f"""You are an assistant designed to answer queries based on data given in the {context_name} context. This {context_name} \
    context contains information about bond transactions. You should provide responses based only on the given data. \
    Your responses should be precise, containing only numbers (e.g., 2000000 instead of 20,00,000 or 20 Lakhs). The {context_name} context \
    is basically table but written in sentence_string format.

    The column names in {context_name} context: {context_col_list}

    Full {context_name} context in sentence_string format:
    --------
    {dataframe_to_sentence_string(context_df)}
    --------

    Answer the given user's question based on these sentence_string format data and ensure your response includes only the \
    relevant numerical integer. Response should contain only one integer number.
    """

    usr_msg = f"{q_text}"

    return sys_msg, usr_msg

def llm_prompt (pol_df, comp_df, q_text):
  if comp_df.empty:
    context_df = pd.DataFrame(pol_df)
    context_name = "Political_Party"
    # context_col_list = ['Date of Encashment', 'Name of the Political Party', 'Prefix', 'Bond Number', 'Denominations']

  elif pol_df.empty:
    context_df = pd.DataFrame(comp_df)
    context_name = "Purchaser"
    # context_col_list = ['Journal Date', 'Date of Purchase', 'Date of Expiry', 'Name of the Purchaser', 'Prefix', 'Bond Number', 'Denominations']

  else:
    context_df = merge_on_multiple_columns(pol_df, comp_df)
    context_name = "Political_Party_and_Purchaser"

  context_col_list = list(context_df.columns)
  sys_msg, usr_msg = inp_prmpt (context_df, context_name, context_col_list, q_text)

  return sys_msg, usr_msg

def run_groq_model(messages, model, temperature, top_p, max_tokens, stop=None, stream=False):
    chat_completion = client.chat.completions.create(
        messages=messages,
        model=model,
        temperature=temperature,
        top_p=top_p,
        max_tokens=max_tokens,
        stop=stop,
        stream=stream
    )
    return chat_completion.choices[0].message.content

def final_output (party_dfs, company_dfs, q_text):
    for df in party_dfs:
      df = clean_column_names(df)

    for df in company_dfs:
      df = clean_column_names(df)

    party_df_final = pd.concat(party_dfs, ignore_index = True)
    company_df_final = pd.concat(company_dfs, ignore_index = True)


    party_df_final['Name of the Political Party'] = party_df_final['Name of the Political Party'].str.replace('\s+', ' ', regex=True).str.strip()
    company_df_final['Name of the Purchaser'] = company_df_final['Name of the Purchaser'].str.replace('\s+', ' ', regex=True).str.strip()

    del_party_col = ['Sr No.', 'Account no. of Political Party', 'Pay Branch Code', 'Pay Teller']
    del_comp_col = ['Sr No.', 'Reference No  (URN)', 'Issue Branch Code', 'Issue Teller', 'Status']

    party_df_final.drop(columns = del_party_col, inplace = True)
    company_df_final.drop(columns = del_comp_col, inplace = True)

    unq_party_list = list(party_df_final['Name of the Political Party'].unique())
    unq_comp_list = list(company_df_final['Name of the Purchaser'].unique())

    doc = nlp(q_text)

    q_dict = {}

    for e in doc.ents:
        # print(e.label_, e.text, e.start, e.end)
        # print(e.label_, e.text)
        if e.label_ not in q_dict.keys():
            q_dict[e.label_] = [e.text]
        else:
            q_dict[e.label_].append(e.text)


    filtered_pol_df, filtered_comp_df = filter_dataframes(party_df_final, company_df_final, q_dict)

    sys_msg, usr_msg = llm_prompt (filtered_pol_df, filtered_comp_df, q_text)

    messages=[
        {
            "role": "system",
            "content": f"{sys_msg}"
        },

        {
            "role": "user",
            "content": f"{usr_msg}",
        }
    ]

    model = model_checkpoint
    # temperature = tmp
    # top_p = tpv
    # max_tokens = mt
    # stop = ss
    # stream = st

    # model = "mixtral-8x7b-32768"
    # model = "llama3-70b-8192"
    temperature = 0.2
    top_p = 1
    max_tokens = 100
    # stop=["\n", "."]  # Stop at common terminators
    # stream=False

    # print(f"Model: {model}")
    # print(f"Temperature: {temperature}")
    # print(f"Top-p: {top_p}")
    # print(f"Max Tokens: {max_tokens}")
    # print(f"Stop Sequence: {stop}")
    # print(f"Stream: {stream}")

    ret = run_groq_model(messages, model, temperature, top_p, max_tokens, stop = None)
    return ret
############################################

#party_pdf = st.file_uploader("Upload the Political Party PDF document", type=["pdf"])
party_pdf='/content/Document-based-QnA/party_bonds.pdf'
if party_pdf is not None:
  #with open("party_pdf.pdf", "wb") as f:
   # f.write(party_pdf.getbuffer())
  # with st.spinner('Please wait while we parse your document ...'):
  #   time.sleep(5)
  #st.success("Political Party PDF document uploaded successfully! Please wait while we parse your document...")
  st.success("Please wait while we parse the Party_Bonds document...")

# party_pdf_bytes = BytesIO(party_pdf.read())
party_dfs = tabula.read_pdf(party_pdf, lattice = True, multiple_tables = True, pages = "all")
st.success("Document parsed successfully!")

#company_pdf = st.file_uploader("Upload the Purchaser PDF document", type=["pdf"])
company_pdf='/content/Document-based-QnA/company_bonds.pdf'
if company_pdf is not None:
  # with open("company_pdf.pdf", "wb") as f:
  #   f.write(company_pdf.getbuffer())
  st.success(" Please wait while we parse the Company_Bonds document...")

# company_pdf_bytes = BytesIO(company_pdf.read())
company_dfs = tabula.read_pdf(company_pdf, lattice = True, multiple_tables = True, pages = "all")
st.success("Document parsed successfully!")

# party_pdf = "/content/Document-based-QnA/party_bonds.pdf"
# company_pdf = "/content/Document-based-QnA/company_bonds.pdf"

question=st.chat_input(placeholder="Ask a question about the documents", disabled =False)

q_text = str(question)

result = final_output(party_dfs, company_dfs, q_text)

st.text_area("Answer", result, height=100)

# !streamlit run app.py & npx localtunnel --port 8501

